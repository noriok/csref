<?xml version="1.0"?>
<cs>
    <!--

    class : クラス名
    interface : インターフェース名
    url : MSDN の URL

    constructor : コンストラクタ
    field : フィールド
    property : プロパティ
    static-method : static メソッド
    method : インスタンスメソッド

      -->

    <!--

    TODO:
    Stack, Queue, HashSet, SortedSet, Dictionary, BigInteger,
    Regex, Random, Array

      -->

    <class name="Math">
        <!-- これはコメント -->
        <url>https://msdn.microsoft.com/ja-jp/library/system.math%28v=vs.110%29.aspx</url>

        <field>
            <name>E</name>
            <desc></desc>
        </field>

        <field>
            <name>PI</name>
        </field>

        <static-method>
            <name>Abs</name>
        </static-method>

        <static-method>
            <name>Acos</name>
        </static-method>

        <static-method>
            <name>Asin</name>
        </static-method>

        <static-method>
            <name>Atan</name>
        </static-method>

        <static-method>
            <name>Atan2</name>
        </static-method>

        <static-method>
            <name>BigMul</name>
        </static-method>

        <static-method>
            <name>Celling</name>
        </static-method>

        <static-method>
            <name>Cos</name>
        </static-method>

        <static-method>
            <name>Cosh</name>
        </static-method>

        <static-method>
            <name>DivRem</name>
        </static-method>

        <static-method>
            <name>Exp</name>
        </static-method>

        <static-method>
            <name>Floor</name>
        </static-method>

        <static-method>
            <name>IEEERemainder</name>
        </static-method>

        <static-method>
            <name>Log</name>
        </static-method>

        <static-method>
            <name>Log10</name>
        </static-method>

        <static-method>
            <name>Max</name>
        </static-method>

        <static-method>
            <name>Min</name>
        </static-method>

        <static-method>
            <name>Pow</name>
        </static-method>

        <static-method>
            <name>Round</name>
        </static-method>

        <static-method>
            <name>Sign</name>
        </static-method>

        <static-method>
            <name>Sin</name>
        </static-method>

        <static-method>
            <name>Sinh</name>
        </static-method>

        <static-method>
            <name>Sqrt</name>
        </static-method>

        <static-method>
            <name>Tan</name>
        </static-method>

        <static-method>
            <name>Tanh</name>
        </static-method>

        <static-method>
            <name>Truncate</name>
        </static-method>

    </class>

    <class name="List">
        <url>https://msdn.microsoft.com/ja-jp/library/6sh2ey19%28v=vs.110%29.aspx</url>

        <property>
            <name>Capacity</name>
        </property>

        <property>
            <name>Count</name>
        </property>

        <property>
            <name>Item</name>
        </property>

        <method>
            <name>Add</name>
        </method>

        <method>
            <name>AddRange</name>
        </method>

        <method>
            <name>AsReadOnly</name>
        </method>

        <method>
            <name>BinarySearch</name>
        </method>

        <method>
            <name>Clear</name>
        </method>

        <method>
            <name>Contains</name>
        </method>

        <method>
            <name>ConvertAll</name>
        </method>

        <method>
            <name>CopyTo</name>
        </method>

        <method>
            <name>Equals</name>
        </method>

        <method>
            <name>Exists</name>
        </method>

        <method>
            <name>Finalize</name>
        </method>

        <method>
            <name>Find</name>
            <sig>T (Predicate&lt;T&gt; match)</sig>
            <desc>
                match にマッチする最初の要素を返します。
                見つからない場合は、T の既定値を返します。
            </desc>
            <example>
csharp> var ls = new List&lt;int&gt;() { 3, 22 };
csharp> ls.Find(e => e == 3);
3
csharp> ls.Find(e => e > 10);
22
csharp> ls.Find(e => e == 10); // int の既定値が返る
0
            </example>
        </method>

        <method>
            <name>FindAll</name>
        </method>

        <method>
            <name>FindIndex</name>
        </method>

        <method>
            <name>FindLast</name>
        </method>

        <method>
            <name>FindLastIndex</name>
        </method>

        <method>
            <name>ForEach</name>
        </method>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>GetHashCode</name>
        </method>

        <method>
            <name>GetRange</name>
        </method>

        <method>
            <name>GetType</name>
        </method>

        <method>
            <name>IndexOf</name>
        </method>

        <method>
            <name>Insert</name>
            <sig>void (int index, T item)</sig>
        </method>

        <method>
            <name>InsertRange</name>
        </method>

        <method>
            <name>LastIndexOf</name>
        </method>

        <method>
            <name>MemberwiseClone</name>
        </method>

        <method>
            <name>Remove</name>
            <sig>bool (T item)</sig>
        </method>

        <method>
            <name>RemoveAll</name>
        </method>

        <method>
            <name>RemoveAt</name>
            <sig>void (int index)</sig>
        </method>

        <method>
            <name>RemoveRange</name>
        </method>

        <method>
            <name>Reverse</name>
        </method>

        <method>
            <name>Sort</name>
        </method>

        <method>
            <name>ToArray</name>
        </method>

        <method>
            <name>ToString</name>
        </method>

        <method>
            <name>TrimExcess</name>
        </method>

        <method>
            <name>TrueForAll</name>
        </method>
    </class>

    <class name="String">
        <url>https://msdn.microsoft.com/ja-jp/library/system.string(v=vs.110).aspx</url>

        <constructor>
        </constructor>

        <field>
            <name>Empty</name>
        </field>

        <property>
            <name>Chars</name>
            <desc>
                public char this[int index] { get; }
            </desc>
        </property>

        <property>
            <name>Length</name>
        </property>

        <method>
            <name>Clone</name>
        </method>

        <method>
            <name>Compare</name>
        </method>

        <method>
            <name>CompareTo</name>
        </method>

        <static-method>
            <name>Concat</name>
        </static-method>

        <method>
            <name>Contains</name>
        </method>

        <method>
            <name>Copy</name>
        </method>


        <method>
            <name>CopyTo</name>
        </method>

        <method>
            <name>EndsWith</name>
            <sig>bool (string value)</sig>
            <sig>bool (string value, StringComparison type)</sig>
            <sig>bool (string value, bool ignoreCase, CultureInfo culture)</sig>
        </method>

        <method>
            <name>Equals</name>
        </method>

        <static-method>
            <name>Format</name>
        </static-method>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>GetHashCode</name>
        </method>

        <method>
            <name>GetType</name>
        </method>

        <method>
            <name>GetTypeCode</name>
        </method>

        <method>
            <name>IndexOf</name>
            <sig>int (char   value)</sig>
            <sig>int (string value)</sig>
            <sig>int (char   value, int startIndex)</sig>
            <sig>int (string value, int startIndex)</sig>
            <sig>int (string value, StringComparison type)</sig>
            <sig>int (char   value, int startIndex, int count)</sig>
            <sig>int (string value, int startIndex, int count)</sig>
            <sig>int (string value, int startIndex, StringComparison type)</sig>
            <sig>int (string value, int startIndex, int count, StringComparison type)</sig>
            <desc>
                文字、または文字列を検索する。最初に見つかったインデックスを返します。
                見つからなければ、-1 を返します。
            </desc>
            <example>
csharp> var s = "abcd-abcd";
csharp> s.IndexOf('-');
4
csharp> s.IndexOf("zz");
-1
csharp> s.IndexOf("a", 1); // インデックス 1 から検索する
5
csharp> s.IndexOf('a');
0
            </example>
        </method>

        <method>
            <name>IndexOfAny</name>
            <sig>int (char[] anyOf)</sig>
            <sig>int (char[] anyOf, int startIndex)</sig>
            <sig>int (char[] anyOf, int startIndex, int count)</sig>
            <desc>
                引数の文字配列のいずれかの文字を検索する。
                最初に見つかった文字のインデックスを返す。
                見つからなければ、-1 を返す。
            </desc>
            <example>
sharp> var s = "hello world";
csharp> s.IndexOfAny("or".ToCharArray());
4
csharp> s.IndexOfAny("ab".ToCharArray());
-1
            </example>
        </method>

        <method>
            <name>Insert</name>
            <sig>string (int startIndex, string value)</sig>
            <desc>
                startIndex に文字列 value を挿入した新しい文字列を返します。
                元の文字列は変更されません。
            </desc>
            <example>
csharp> var s = "hello world"
csharp> s.Insert(2, "abc");
"heabcllo world"
csharp> s
"hello world"
            </example>
        </method>

        <static-method>
            <name>Intern</name>
        </static-method>

        <static-method>
            <name>IsInterned</name>
        </static-method>

        <method>
            <name>IsNormalized</name>
        </method>

        <static-method>
            <name>IsNullOrEmpty</name>
        </static-method>

        <static-method>
            <name>IsNullOrWhiteSpace</name>
        </static-method>

        <static-method>
            <name>Join</name>
        </static-method>

        <method>
            <name>LastIndexOf</name>
            <desc>
                IndexOf() と同じだが、最後に見つかった文字、文字列のインデックスを返す。
                見つからなければ、-1 を返す。
            </desc>
        </method>

        <method>
            <name>LastIndexOfAny</name>
            <desc>
                IndexOfAny() と同じだが、再顔に見つかった文字、文字列のインデックスを返す。
                見つからなければ、-1 を返す。
            </desc>
        </method>

        <method>
            <name>Normalize</name>
        </method>

        <method>
            <name>PadLeft</name>
            <sig>string (int totalWidth)</sig>
            <sig>string (int totalWidth, char paddingChar)</sig>
            <example>
csharp> var s = "abc";
csharp> s.PadLeft(5);
"  abc"
csharp> s.PadLeft(5, '-');
"--abc"
            </example>
        </method>

        <method>
            <name>PadRight</name>
            <sig>string (int totalWidth)</sig>
            <sig>string (int totalWidth, char paddingChar)</sig>
            <example>
csharp> var s = "abc";
csharp> s.PadRight(5);
"abc  "
csharp> s.PadRight(5, '-');
"abc--"
            </example>
        </method>

        <method>
            <name>Remove</name>
            <sig>string (int startIndex)</sig>
            <sig>string (int startIndex, int count)</sig>
            <desc>
                startIndex 以降の文字列を取り除いた新しい文字列を返します。
            </desc>
            <example>
csharp> var s = "helloworld";
csharp> s.Remove(2);
"he"
csharp> s
"helloworld"
csharp> s.Remove(2, 3);
"heworld"
            </example>
        </method>

        <method>
            <name>Replace</name>
            <sig>string (char oldChar, char newChar)</sig>
            <sig>string (string oldValue, string newValue)</sig>
            <example>
csharp> "abcabc".Replace("abc", "def"); // 全ての文字列が置換される
"defdef"
csharp> "hello world".Replace('o', '-'); // 全ての文字が置換される
"hell- w-rld"
            </example>
        </method>

        <method>
            <name>Split</name>
        </method>

        <method>
            <name>StartsWith</name>
            <sig>bool (string value)</sig>
            <sig>bool (string value, StringComparison type)</sig>
            <sig>bool (string value, bool ignoreCase, CultureInfo culture)</sig>
        </method>

        <method>
            <name>Substring</name>
            <sig>string (int startIndex)</sig>
            <sig>string (int startIndex, int length)</sig>
            <example>
csharp> var s = "abc-def";
csharp> s.Substring(3);
"-def"
csharp> s.Substring(3, 2);
"-d"
            </example>
        </method>

        <method>
            <name>ToCharArray</name>
        </method>

        <method>
            <name>ToLower</name>
        </method>

        <method>
            <name>ToLowerInvariant</name>
        </method>

        <method>
            <name>ToString</name>
        </method>

        <method>
            <name>ToUpper</name>
        </method>

        <method>
            <name>ToUpperInvariant</name>
        </method>

        <method>
            <name>Trim</name>
        </method>

        <method>
            <name>TrimEnd</name>
        </method>

        <method>
            <name>TrimStart</name>
        </method>

    </class>

    <class name="Array">
        <static-method>
            <name>AsReadOnly</name>
        </static-method>

        <static-method>
            <name>BinarySearch</name>
        </static-method>

        <static-method>
            <name>Clear</name>
        </static-method>

        <static-method>
            <name>Clone</name>
        </static-method>

        <static-method>
            <name>ConstrainedCopy</name>
        </static-method>

        <static-method>
            <name>ConvertAll</name>
        </static-method>

        <static-method>
            <name>Copy</name>
        </static-method>

        <static-method>
            <name>CopyTo</name>
        </static-method>

        <static-method>
            <name>CreateInstance</name>
        </static-method>

        <static-method>
            <name>Equals</name>
        </static-method>

        <static-method>
            <name>Exists</name>
        </static-method>

        <static-method>
            <name>Finalize</name>
        </static-method>

        <static-method>
            <name>Find</name>
        </static-method>

        <static-method>
            <name>FindAll</name>
        </static-method>

        <static-method>
            <name>FindIndex</name>
        </static-method>

        <static-method>
            <name>FindLast</name>
        </static-method>

        <static-method>
            <name>FindLastIndex</name>
        </static-method>

        <static-method>
            <name>ForEach</name>
        </static-method>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>GetHashCode</name>
        </method>

        <method>
            <name>GetLength</name>
        </method>

        <method>
            <name>GetongLength</name>
        </method>

        <method>
            <name>GetLowerBound</name>
        </method>

        <method>
            <name>GetType</name>
        </method>

        <method>
            <name>GetUpperBound</name>
        </method>

        <method>
            <name>GetValue</name>
        </method>

        <static-method>
            <name>IndexOf</name>
        </static-method>

        <method>
            <name>Initialize</name>
        </method>

        <static-method>
            <name>LastIndexOf</name>
        </static-method>

        <method>
            <name>MemberwiseClone</name>
        </method>

        <static-method>
            <name>Resize</name>
        </static-method>

        <static-method>
            <name>Reverse</name>
        </static-method>

        <method>
            <name>SetValue</name>
        </method>

        <static-method>
            <name>Sort</name>
        </static-method>

        <method>
            <name>ToString</name>
        </method>

        <static-method>
            <name>TrueForAll</name>
        </static-method>
    </class>

    <class name="Dictionary">
        <method>
            <name>Add</name>
        </method>

        <method>
            <name>Clear</name>
        </method>

        <method>
            <name>ContainsKey</name>
        </method>

        <method>
            <name>ContainsValue</name>
        </method>

        <method>
            <name>Equals</name>
        </method>

        <method>
            <name>Finalize</name>
        </method>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>GetHashCode</name>
        </method>

        <method>
            <name>GetObjectData</name>
        </method>

        <method>
            <name>GetType</name>
        </method>

        <method>
            <name>MemberwiseClone</name>
        </method>

        <method>
            <name>OnDeserialization</name>
        </method>

        <method>
            <name>Remove</name>
        </method>

        <method>
            <name>ToString</name>
        </method>

        <method>
            <name>TryGetValue</name>
        </method>

        <property>
            <name>Comparer</name>
        </property>

        <property>
            <name>Count</name>
        </property>

        <property>
            <name>Item</name>
        </property>

        <property>
            <name>Keys</name>
        </property>

        <property>
            <name>Values</name>
        </property>

    </class>

    <class name="HashSet">
        <method>
            <name>Add</name>
        </method>

        <method>
            <name>Clear</name>
        </method>

        <method>
            <name>Contains</name>
        </method>

        <method>
            <name>CopyTo</name>
        </method>

        <static-method>
            <name>CreateSetComparer</name>
        </static-method>

        <method>
            <name>Equals</name>
        </method>

        <method>
            <name>ExceptWith</name>
        </method>

        <method>
            <name>Finalize</name>
        </method>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>GetHashCode</name>
        </method>

        <method>
            <name>GetObjectData</name>
        </method>

        <method>
            <name>GetType</name>
        </method>

        <method>
            <name>IntersectWith</name>
        </method>

        <method>
            <name>IsProperSubsetOf</name>
        </method>

        <method>
            <name>IsProperSupersetOf</name>
        </method>

        <method>
            <name>IsSubsetOf</name>
        </method>

        <method>
            <name>IsSupersetOf</name>
        </method>

        <method>
            <name>MemberwiseClone</name>
        </method>

        <method>
            <name>OnDeserialization</name>
        </method>

        <method>
            <name>Overlaps</name>
        </method>

        <method>
            <name>Remove</name>
        </method>

        <method>
            <name>RemoveWhere</name>
        </method>

        <method>
            <name>SetEquals</name>
        </method>

        <method>
            <name>SymmetricExceptWith</name>
        </method>

        <method>
            <name>ToString</name>
        </method>

        <method>
            <name>TrimExcess</name>
        </method>

        <method>
            <name>UnionWith</name>
        </method>

        <property>
            <name>Comparer</name>
        </property>

        <property>
            <name>Count</name>
        </property>

    </class>


    <class name="Stack">
        <method>
            <name>Clear</name>
        </method>

        <method>
            <name>Contains</name>
        </method>

        <method>
            <name>CopyTo</name>
        </method>

        <method>
            <name>Equals</name>
        </method>

        <method>
            <name>Finalize</name>
        </method>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>GetHashCode</name>
        </method>

        <method>
            <name>GetType</name>
        </method>

        <method>
            <name>MemberwiseClone</name>
        </method>

        <method>
            <name>Peek</name>
        </method>

        <method>
            <name>Pop</name>
        </method>

        <method>
            <name>Push</name>
        </method>

        <method>
            <name>ToArray</name>
        </method>

        <method>
            <name>ToString</name>
        </method>

        <method>
            <name>TrimExcess</name>
        </method>

        <property>
            <name>Count</name>
        </property>
    </class>

    <class name="Queue">
        <method>
            <name>Clear</name>
        </method>

        <method>
            <name>Contains</name>
        </method>

        <method>
            <name>CopyTo</name>
        </method>

        <method>
            <name>Dequeue</name>
        </method>

        <method>
            <name>Enqueue</name>
        </method>

        <method>
            <name>Equals</name>
        </method>

        <method>
            <name>Finalize</name>
        </method>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>GetHashCode</name>
        </method>

        <method>
            <name>GetType</name>
        </method>

        <method>
            <name>MemberwiseClone</name>
        </method>

        <method>
            <name>Peek</name>
        </method>

        <method>
            <name>ToArray</name>
        </method>

        <method>
            <name>ToString</name>
        </method>

        <method>
            <name>TrimExcess</name>
        </method>

        <property>
            <name>Count</name>
        </property>
    </class>


    <interface name="IEnumerator&lt;T&gt;">
        <url>https://msdn.microsoft.com/ja-jp/library/ckzcawb8(v=vs.110).aspx</url>

        <method>
            <name>GetEnumerator</name>
        </method>

        <method>
            <name>Aggregate</name>
        </method>

        <method>
            <name>All</name>
        </method>

        <method>
            <name>Ancestors</name>
        </method>

        <method>
            <name>Any</name>
        </method>

        <method>
            <name>AsEnumerable</name>
        </method>

        <method>
            <name>AsParallel</name>
        </method>

        <method>
            <name>AsQueryable</name>
        </method>

        <method>
            <name>Average</name>
        </method>

        <method>
            <name>Cast</name>
        </method>

        <method>
            <name>Concat</name>
        </method>

        <method>
            <name>Contains</name>
        </method>

        <method>
            <name>CopyToDataTable</name>
        </method>

        <method>
            <name>Count</name>
        </method>

        <method>
            <name>DefaultIfEmpty</name>
        </method>

        <method>
            <name>DescendantNodes</name>
        </method>

        <method>
            <name>Distinct</name>
        </method>

        <method>
            <name>ElementAt</name>
        </method>

        <method>
            <name>ElementAtOrDefault</name>
        </method>

        <method>
            <name>Elements</name>
        </method>

        <method>
            <name>Except</name>
        </method>

        <method>
            <name>First</name>
        </method>

        <method>
            <name>FirstOrDefault</name>
        </method>

        <method>
            <name>GroupBy</name>
        </method>

        <method>
            <name>GroupJoin</name>
        </method>

        <method>
            <name>InDocumentOrder</name>
        </method>

        <method>
            <name>Intersect</name>
        </method>

        <method>
            <name>Join</name>
        </method>

        <method>
            <name>Last</name>
        </method>

        <method>
            <name>LastOrDefault</name>
        </method>

        <method>
            <name>LongCount</name>
        </method>

        <method>
            <name>Max</name>
        </method>

        <method>
            <name>Min</name>
        </method>

        <method>
            <name>Nodes</name>
        </method>

        <method>
            <name>OfType</name>
        </method>

        <method>
            <name>OrderBy</name>
        </method>

        <method>
            <name>OrderByDescending</name>
        </method>

        <method>
            <name>Remove</name>
        </method>

        <method>
            <name>Reverse</name>
        </method>

        <method>
            <name>Select</name>
        </method>

        <method>
            <name>SelectMany</name>
        </method>

        <method>
            <name>SequenceEqual</name>
        </method>

        <method>
            <name>Single</name>
        </method>

        <method>
            <name>SingleOrDefault</name>
        </method>

        <method>
            <name>Skip</name>
        </method>

        <method>
            <name>SkipWhile</name>
        </method>

        <method>
            <name>Subscribe</name>
        </method>

        <method>
            <name>Sum</name>
        </method>

        <method>
            <name>Take</name>
        </method>

        <method>
            <name>TakeWhile</name>
        </method>

        <method>
            <name>ToArray</name>
        </method>

        <method>
            <name>ToDictionary</name>
        </method>

        <method>
            <name>ToList</name>
        </method>

        <method>
            <name>ToLookup</name>
        </method>

        <method>
            <name>ToObservable</name>
        </method>

        <method>
            <name>Union</name>
        </method>

        <method>
            <name>Where</name>
        </method>

        <method>
            <name>Zip</name>
        </method>
    </interface>



</cs>



